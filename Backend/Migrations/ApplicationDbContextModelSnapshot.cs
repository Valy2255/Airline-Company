// <auto-generated />
using System;
using Backend.ApplicationDBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.Aircraft", b =>
                {
                    b.Property<int>("AircraftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AircraftId"));

                    b.Property<int>("AutonomyInHours")
                        .HasColumnType("int");

                    b.Property<string>("Maker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaxCargo")
                        .HasColumnType("float");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AircraftId");

                    b.ToTable("Aircrafts");

                    b.HasData(
                        new
                        {
                            AircraftId = 1,
                            AutonomyInHours = 7,
                            Maker = "Boeing",
                            MaxCargo = 20700.0,
                            Model = "737-800",
                            NumberOfSeats = 189,
                            RegistrationNumber = "YR-BGH"
                        },
                        new
                        {
                            AircraftId = 2,
                            AutonomyInHours = 7,
                            Maker = "Airbus",
                            MaxCargo = 22000.0,
                            Model = "A320",
                            NumberOfSeats = 160,
                            RegistrationNumber = "LZ-BHF"
                        },
                        new
                        {
                            AircraftId = 3,
                            AutonomyInHours = 7,
                            Maker = "Boeing",
                            MaxCargo = 20700.0,
                            Model = "737 MAX 8",
                            NumberOfSeats = 200,
                            RegistrationNumber = "EI-GTA"
                        },
                        new
                        {
                            AircraftId = 4,
                            AutonomyInHours = 7,
                            Maker = "Airbus",
                            MaxCargo = 25000.0,
                            Model = "A321neo",
                            NumberOfSeats = 236,
                            RegistrationNumber = "D-AVZO"
                        },
                        new
                        {
                            AircraftId = 5,
                            AutonomyInHours = 14,
                            Maker = "Boeing",
                            MaxCargo = 22400.0,
                            Model = "777-300ER",
                            NumberOfSeats = 396,
                            RegistrationNumber = "G-STBD"
                        },
                        new
                        {
                            AircraftId = 6,
                            AutonomyInHours = 15,
                            Maker = "Airbus",
                            MaxCargo = 30000.0,
                            Model = "A350-900",
                            NumberOfSeats = 325,
                            RegistrationNumber = "F-WXWB"
                        },
                        new
                        {
                            AircraftId = 7,
                            AutonomyInHours = 14,
                            Maker = "Boeing",
                            MaxCargo = 28000.0,
                            Model = "787-9",
                            NumberOfSeats = 290,
                            RegistrationNumber = "SP-LSC"
                        },
                        new
                        {
                            AircraftId = 8,
                            AutonomyInHours = 10,
                            Maker = "Airbus",
                            MaxCargo = 33000.0,
                            Model = "A330-300",
                            NumberOfSeats = 277,
                            RegistrationNumber = "EI-EDY"
                        },
                        new
                        {
                            AircraftId = 9,
                            AutonomyInHours = 15,
                            Maker = "Boeing",
                            MaxCargo = 34000.0,
                            Model = "747-400",
                            NumberOfSeats = 416,
                            RegistrationNumber = "HZ-AI3"
                        },
                        new
                        {
                            AircraftId = 10,
                            AutonomyInHours = 16,
                            Maker = "Airbus",
                            MaxCargo = 37500.0,
                            Model = "A380",
                            NumberOfSeats = 516,
                            RegistrationNumber = "A6-EDA"
                        });
                });

            modelBuilder.Entity("Backend.Models.Airport", b =>
                {
                    b.Property<int>("AirportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AirportId"));

                    b.Property<string>("AirportName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AirportId");

                    b.ToTable("Airports");

                    b.HasData(
                        new
                        {
                            AirportId = 1,
                            AirportName = "OTP",
                            Location = "Bucharest, Romania"
                        },
                        new
                        {
                            AirportId = 2,
                            AirportName = "BCN",
                            Location = "Barcelona, Spain"
                        },
                        new
                        {
                            AirportId = 3,
                            AirportName = "CDG",
                            Location = "Paris, France"
                        },
                        new
                        {
                            AirportId = 4,
                            AirportName = "FRA",
                            Location = "Frankfurt, Germany"
                        },
                        new
                        {
                            AirportId = 5,
                            AirportName = "LHR",
                            Location = "London, United Kingdom"
                        },
                        new
                        {
                            AirportId = 6,
                            AirportName = "FCO",
                            Location = "Rome, Italy"
                        },
                        new
                        {
                            AirportId = 7,
                            AirportName = "AMS",
                            Location = "Amsterdam, Netherlands"
                        },
                        new
                        {
                            AirportId = 8,
                            AirportName = "VIE",
                            Location = "Vienna, Austria"
                        },
                        new
                        {
                            AirportId = 9,
                            AirportName = "ATH",
                            Location = "Athens, Greece"
                        },
                        new
                        {
                            AirportId = 10,
                            AirportName = "WAW",
                            Location = "Warsaw, Poland"
                        });
                });

            modelBuilder.Entity("Backend.Models.CheckIn", b =>
                {
                    b.Property<int>("CheckInId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CheckInId"));

                    b.Property<bool>("CheckInStatus")
                        .HasColumnType("bit");

                    b.Property<string>("DocumentData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdDocumentType")
                        .HasColumnType("int");

                    b.Property<string>("PassengerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassengerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("CheckInId");

                    b.HasIndex("TicketId")
                        .IsUnique();

                    b.ToTable("CheckIns");

                    b.HasData(
                        new
                        {
                            CheckInId = 1,
                            CheckInStatus = true,
                            DocumentData = "DL12345678",
                            IdDocumentType = 2,
                            PassengerEmail = "user@wateryairlines.com",
                            PassengerName = "Jane Smith",
                            TicketId = 2
                        },
                        new
                        {
                            CheckInId = 2,
                            CheckInStatus = true,
                            DocumentData = "IC987654321",
                            IdDocumentType = 0,
                            PassengerEmail = "user@wateryairlines.com",
                            PassengerName = "Jane Smith",
                            TicketId = 3
                        },
                        new
                        {
                            CheckInId = 3,
                            CheckInStatus = true,
                            DocumentData = "Passport223344",
                            IdDocumentType = 1,
                            PassengerEmail = "user@wateryairlines.com",
                            PassengerName = "Jane Smith",
                            TicketId = 4
                        },
                        new
                        {
                            CheckInId = 4,
                            CheckInStatus = true,
                            DocumentData = "DL22334455",
                            IdDocumentType = 2,
                            PassengerEmail = "user@wateryairlines.com",
                            PassengerName = "Jane Smith",
                            TicketId = 5
                        });
                });

            modelBuilder.Entity("Backend.Models.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<string>("DiscountDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountPercentage")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DiscountId");

                    b.HasIndex("FlightId")
                        .IsUnique();

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            DiscountId = 1,
                            DiscountDescription = "Catch the summer rays! Book now and get 20% off!",
                            DiscountName = "Summer Sun",
                            DiscountPercentage = 20,
                            EndDate = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightId = 1,
                            StartDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DiscountId = 2,
                            DiscountDescription = "Festival season is here! Enjoy 15% off your flight!",
                            DiscountName = "Summer Festival",
                            DiscountPercentage = 15,
                            EndDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightId = 7,
                            StartDate = new DateTime(2025, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DiscountId = 3,
                            DiscountDescription = "Enjoy the beauty of autumn with 10% off!",
                            DiscountName = "Autumn Colors",
                            DiscountPercentage = 10,
                            EndDate = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightId = 8,
                            StartDate = new DateTime(2025, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DiscountId = 4,
                            DiscountDescription = "Discover winter magic with 20% off!",
                            DiscountName = "Winter Wonderland",
                            DiscountPercentage = 20,
                            EndDate = new DateTime(2024, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightId = 3,
                            StartDate = new DateTime(2024, 12, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DiscountId = 5,
                            DiscountDescription = "Ring in the new year with travel! Enjoy 25% off!",
                            DiscountName = "New Year New Travels",
                            DiscountPercentage = 25,
                            EndDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightId = 4,
                            StartDate = new DateTime(2025, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DiscountId = 6,
                            DiscountDescription = "Celebrate spring with a special 15% off on flights!",
                            DiscountName = "Spring Blossom",
                            DiscountPercentage = 15,
                            EndDate = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightId = 5,
                            StartDate = new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DiscountId = 7,
                            DiscountDescription = "Hop into savings this Easter with 10% off!",
                            DiscountName = "Easter Getaway",
                            DiscountPercentage = 10,
                            EndDate = new DateTime(2025, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightId = 6,
                            StartDate = new DateTime(2025, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DiscountId = 8,
                            DiscountDescription = "Escape the spooky season with 15% off!",
                            DiscountName = "Halloween Escape",
                            DiscountPercentage = 15,
                            EndDate = new DateTime(2024, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightId = 2,
                            StartDate = new DateTime(2024, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Backend.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<bool>("Luggage")
                        .HasColumnType("bit");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("FlightId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            FlightId = 1,
                            Luggage = true,
                            Price = 135f,
                            UserId = 2
                        },
                        new
                        {
                            TicketId = 2,
                            FlightId = 2,
                            Luggage = false,
                            Price = 85f,
                            UserId = 2
                        },
                        new
                        {
                            TicketId = 3,
                            FlightId = 3,
                            Luggage = true,
                            Price = 255f,
                            UserId = 2
                        },
                        new
                        {
                            TicketId = 4,
                            FlightId = 4,
                            Luggage = false,
                            Price = 150f,
                            UserId = 2
                        },
                        new
                        {
                            TicketId = 5,
                            FlightId = 5,
                            Luggage = true,
                            Price = 212.5f,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            EmailAddress = "admin@wateryairlines.com",
                            Name = "John Doe",
                            Password = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918",
                            Role = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            EmailAddress = "user@wateryairlines.com",
                            Name = "Jane Smith",
                            Password = "04f8996da763b7a969b1028ee3007569eaf3a635486ddab211d512c85b9df8fb",
                            Role = "passenger"
                        });
                });

            modelBuilder.Entity("Flight", b =>
                {
                    b.Property<int>("FlightNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightNumber"));

                    b.Property<int>("AircraftId")
                        .HasColumnType("int");

                    b.Property<int>("DepartingAirportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartingTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestinationAirportId")
                        .HasColumnType("int");

                    b.Property<int>("FlightCost")
                        .HasColumnType("int");

                    b.Property<DateTime>("FlightTime")
                        .HasColumnType("datetime2");

                    b.HasKey("FlightNumber");

                    b.HasIndex("AircraftId");

                    b.HasIndex("DepartingAirportId");

                    b.HasIndex("DestinationAirportId");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            FlightNumber = 1,
                            AircraftId = 1,
                            DepartingAirportId = 1,
                            DepartingTime = new DateTime(2024, 8, 10, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 2,
                            FlightCost = 200,
                            FlightTime = new DateTime(2024, 8, 10, 8, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightNumber = 2,
                            AircraftId = 2,
                            DepartingAirportId = 3,
                            DepartingTime = new DateTime(2024, 10, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 4,
                            FlightCost = 100,
                            FlightTime = new DateTime(2024, 10, 15, 10, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightNumber = 3,
                            AircraftId = 3,
                            DepartingAirportId = 5,
                            DepartingTime = new DateTime(2024, 12, 21, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 6,
                            FlightCost = 300,
                            FlightTime = new DateTime(2024, 12, 21, 20, 45, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightNumber = 4,
                            AircraftId = 4,
                            DepartingAirportId = 1,
                            DepartingTime = new DateTime(2024, 8, 10, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 2,
                            FlightCost = 200,
                            FlightTime = new DateTime(2024, 8, 10, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightNumber = 5,
                            AircraftId = 5,
                            DepartingAirportId = 9,
                            DepartingTime = new DateTime(2025, 3, 5, 13, 45, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 10,
                            FlightCost = 250,
                            FlightTime = new DateTime(2025, 3, 5, 17, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightNumber = 6,
                            AircraftId = 6,
                            DepartingAirportId = 2,
                            DepartingTime = new DateTime(2024, 9, 25, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 1,
                            FlightCost = 175,
                            FlightTime = new DateTime(2024, 9, 25, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightNumber = 7,
                            AircraftId = 7,
                            DepartingAirportId = 4,
                            DepartingTime = new DateTime(2024, 8, 29, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 3,
                            FlightCost = 115,
                            FlightTime = new DateTime(2024, 8, 29, 20, 45, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightNumber = 8,
                            AircraftId = 8,
                            DepartingAirportId = 6,
                            DepartingTime = new DateTime(2024, 11, 16, 20, 30, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 5,
                            FlightCost = 320,
                            FlightTime = new DateTime(2024, 11, 17, 1, 45, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightNumber = 9,
                            AircraftId = 9,
                            DepartingAirportId = 8,
                            DepartingTime = new DateTime(2025, 2, 14, 6, 15, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 7,
                            FlightCost = 180,
                            FlightTime = new DateTime(2025, 2, 14, 8, 35, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightNumber = 10,
                            AircraftId = 10,
                            DepartingAirportId = 10,
                            DepartingTime = new DateTime(2025, 4, 28, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 9,
                            FlightCost = 275,
                            FlightTime = new DateTime(2025, 4, 29, 0, 50, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightNumber = 11,
                            AircraftId = 1,
                            DepartingAirportId = 1,
                            DepartingTime = new DateTime(2024, 9, 28, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 10,
                            FlightCost = 160,
                            FlightTime = new DateTime(2024, 9, 28, 10, 45, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightNumber = 12,
                            AircraftId = 2,
                            DepartingAirportId = 2,
                            DepartingTime = new DateTime(2024, 10, 3, 14, 15, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 9,
                            FlightCost = 90,
                            FlightTime = new DateTime(2024, 10, 3, 15, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightNumber = 13,
                            AircraftId = 3,
                            DepartingAirportId = 3,
                            DepartingTime = new DateTime(2024, 12, 8, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 8,
                            FlightCost = 285,
                            FlightTime = new DateTime(2024, 12, 8, 12, 45, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightNumber = 14,
                            AircraftId = 4,
                            DepartingAirportId = 4,
                            DepartingTime = new DateTime(2025, 1, 22, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 7,
                            FlightCost = 210,
                            FlightTime = new DateTime(2025, 1, 22, 19, 20, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightNumber = 15,
                            AircraftId = 5,
                            DepartingAirportId = 5,
                            DepartingTime = new DateTime(2025, 3, 30, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 6,
                            FlightCost = 260,
                            FlightTime = new DateTime(2025, 3, 30, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightNumber = 16,
                            AircraftId = 6,
                            DepartingAirportId = 6,
                            DepartingTime = new DateTime(2024, 9, 30, 5, 30, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 5,
                            FlightCost = 190,
                            FlightTime = new DateTime(2024, 9, 30, 8, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightNumber = 17,
                            AircraftId = 7,
                            DepartingAirportId = 7,
                            DepartingTime = new DateTime(2024, 11, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 4,
                            FlightCost = 120,
                            FlightTime = new DateTime(2024, 11, 12, 11, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightNumber = 18,
                            AircraftId = 8,
                            DepartingAirportId = 8,
                            DepartingTime = new DateTime(2025, 2, 1, 15, 15, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 3,
                            FlightCost = 240,
                            FlightTime = new DateTime(2025, 2, 1, 18, 25, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightNumber = 19,
                            AircraftId = 9,
                            DepartingAirportId = 9,
                            DepartingTime = new DateTime(2025, 4, 17, 22, 30, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 2,
                            FlightCost = 175,
                            FlightTime = new DateTime(2025, 4, 17, 23, 55, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightNumber = 20,
                            AircraftId = 10,
                            DepartingAirportId = 10,
                            DepartingTime = new DateTime(2025, 5, 12, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 1,
                            FlightCost = 290,
                            FlightTime = new DateTime(2025, 5, 12, 21, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Backend.Models.CheckIn", b =>
                {
                    b.HasOne("Backend.Models.Ticket", "Ticket")
                        .WithOne("CheckIn")
                        .HasForeignKey("Backend.Models.CheckIn", "TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Backend.Models.Discount", b =>
                {
                    b.HasOne("Flight", "Flight")
                        .WithOne("Discount")
                        .HasForeignKey("Backend.Models.Discount", "FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("Backend.Models.Ticket", b =>
                {
                    b.HasOne("Flight", "Flight")
                        .WithMany("PassengerList")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.User", "User")
                        .WithMany("TicketList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flight", b =>
                {
                    b.HasOne("Backend.Models.Aircraft", "Aircraft")
                        .WithMany()
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Airport", "DepartingAirport")
                        .WithMany()
                        .HasForeignKey("DepartingAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Airport", "DestinationAirport")
                        .WithMany()
                        .HasForeignKey("DestinationAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aircraft");

                    b.Navigation("DepartingAirport");

                    b.Navigation("DestinationAirport");
                });

            modelBuilder.Entity("Backend.Models.Ticket", b =>
                {
                    b.Navigation("CheckIn")
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Navigation("TicketList");
                });

            modelBuilder.Entity("Flight", b =>
                {
                    b.Navigation("Discount")
                        .IsRequired();

                    b.Navigation("PassengerList");
                });
#pragma warning restore 612, 618
        }
    }
}
